אני רואה שיצרת חשבון GitHub בשם betbox22 וכעת הגדרת את האפליקציה Render שתוכל לגשת לרפוזיטורי שלך. זה צעד חשוב!

הנה מה לעשות עכשיו:

### צעד 1: יצירת רפוזיטורי חדש ב-GitHub

1. לחץ על **Repositories** בתפריט הצד השמאלי

2. לחץ על כפתור **New** (ירוק) ליצירת רפוזיטורי חדש

3. הגדרות הרפוזיטורי:
   - שם הרפוזיטורי: `betbox-live`
   - תיאור (אופציונלי): `מערכת לזיהוי הזדמנויות הימורים בזמן אמת`
   - הגדר כ-Public
   - סמן את האפשרות "Initialize with a README"
   - לחץ "Create repository"

### צעד 2: העלאת קבצי הקוד

לאחר יצירת הרפוזיטורי, תצטרך להעלות את הקבצים הבאים:

1. לחץ על "Add file" ואז "Create new file"

2. צור קובץ **requirements.txt**:
   - בשדה "Name your file", הזן `requirements.txt`
   - בתוכן הקובץ, העתק את הטקסט הבא:
   ```
   flask
   gunicorn
   requests
   pandas
   Flask-Cors
   ```
   - גלול למטה ולחץ "Commit new file"

3. צור קובץ **app.py**:
   - לחץ שוב על "Add file" ואז "Create new file"
   - בשדה "Name your file", הזן `app.py`
   - בתוכן הקובץ, העתק את הקוד הבא:
   ```python
   from flask import Flask, jsonify, request, send_from_directory
   from flask_cors import CORS
   import requests
   import os
   import json
   
   app = Flask(__name__, static_folder='static')
   CORS(app)
   
   API_TOKEN = os.environ.get('API_TOKEN', '219761-iALwqep7Hy1aCl')
   API_BASE_URL = "https://api.b365api.com/v3"
   
   @app.route('/')
   def home():
       return send_from_directory('static', 'index.html')
   
   @app.route('/api/live-games')
   def get_live_games():
       sport_id = request.args.get('sport_id', 'all')
       
       # אם "הכל", נביא את שני הספורטים העיקריים
       if sport_id == 'all':
           basketball_games = fetch_and_process_games('18')  # כדורסל
           football_games = fetch_and_process_games('1')     # כדורגל
           return jsonify(basketball_games + football_games)
       else:
           games = fetch_and_process_games(sport_id)
           return jsonify(games)
   
   def fetch_and_process_games(sport_id):
       url = f"{API_BASE_URL}/events/inplay"
       params = {
           "sport_id": sport_id,
           "token": API_TOKEN
       }
       
       try:
           response = requests.get(url, params=params)
           response.raise_for_status()
           data = response.json()
           
           processed_games = []
           
           for game in data.get('results', []):
               # קבלת מידע בסיסי על המשחק
               game_id = game.get('id', '')
               league_name = game.get('league', {}).get('name', '')
               home_name = game.get('home', {}).get('name', '')
               away_name = game.get('away', {}).get('name', '')
               score = game.get('ss', '0-0')
               
               # עיבוד זמן המשחק
               timer = game.get('timer', {})
               quarter = timer.get('q', '1')
               minutes = timer.get('tm', '0')
               seconds = timer.get('ts', '0')
               
               # שם הספורט ופורמט הזמן בהתאם
               if sport_id == '18':  # כדורסל
                   sport_type = 'כדורסל'
                   game_time = f"רבע {quarter} ({minutes}:{seconds.zfill(2)})"
               elif sport_id == '1':  # כדורגל
                   sport_type = 'כדורגל'
                   game_time = f"דקה {minutes}" if quarter == '1' else f"דקה {minutes} (מחצית {quarter})"
               else:
                   sport_type = 'אחר'
                   game_time = f"{minutes}:{seconds.zfill(2)}"
               
               # הדמיית ליין פתיחה והתחלה (בפרויקט אמיתי יבוא ממסד נתונים)
               if sport_id == '18':  # כדורסל
                   home_score, away_score = score.split('-')
                   score_diff = int(home_score) - int(away_score)
                   
                   if score_diff > 0:
                       opportunity_type = 'green' if score_diff > 7 else 'neutral'
                       opportunity = 'המועדפת מובילה בהפרש משמעותי' if score_diff > 7 else ''
                   elif score_diff < 0:
                       opportunity_type = 'green' if abs(score_diff) > 5 else 'blue'
                       opportunity = 'האנדרדוג מוביל במשחק - היפוך מגמה' if abs(score_diff) > 5 else 'קצב משחק חריג'
                   else:
                       opportunity_type = 'neutral'
                       opportunity = ''
               else:
                   opportunity_type = 'neutral'
                   opportunity = ''
               
               # יצירת אובייקט משחק לתצוגה
               processed_game = {
                   'id': game_id,
                   'sportType': sport_type,
                   'league': league_name,
                   'matchup': f"{home_name} vs {away_name}",
                   'time': game_time,
                   'score': score,
                   'openingLine': 'Home -4.5, O/U 182.5',  # בפרויקט אמיתי יבוא ממסד נתונים
                   'startingLine': 'Home -3.5, O/U 179.5',  # בפרויקט אמיתי יבוא ממסד נתונים 
                   'currentLine': 'Away -1.5, O/U 192.5',  # בפרויקט אמיתי יחושב מהנתונים הנוכחיים
                   'difference': '<span class="difference-positive">+6.0</span>, <span class="difference-positive">+13.0</span>',
                   'opportunity': opportunity,
                   'opportunityType': opportunity_type
               }
               
               processed_games.append(processed_game)
           
           return processed_games
       except Exception as e:
           print(f"Error fetching games: {str(e)}")
           return []
   
   if __name__ == '__main__':
       app.run(debug=True)
   ```
   - גלול למטה ולחץ "Commit new file"

4. עכשיו צריך ליצור תיקיית `static` עם קובץ ה-HTML:
   1. לחץ על "Add file" ואז "Create new file"
   2. בשדה "Name your file", הזן `static/index.html` (זה ייצור אוטומטית תיקייה בשם static)
   3. העתק לתוכן הקובץ את קוד ה-HTML המלא שיצרתי קודם (הממשק הויזואלי)
   4. גלול למטה ולחץ "Commit new file"

### צעד 3: חיבור ל-Render

1. חזור ל-Render.com ולחץ על "New" ואז "Web Service"

2. תחת "Connect a repository", בחר את הרפוזיטורי שזה עתה יצרת (`betbox-live`)

3. אחרי בחירת הרפוזיטורי, הגדר:
   - **Name**: betbox-live
   - **Region**: אזור קרוב אליך
   - **Branch**: main
   - **Runtime**: Python 3
   - **Build Command**: `pip install -r requirements.txt`
   - **Start Command**: `gunicorn app:app`
   - **Plan Type**: בחר את התכנית החינמית

4. תחת "Advanced" הוסף משתנה סביבה:
   - **API_TOKEN**: `219761-iALwqep7Hy1aCl`

5. לחץ על "Create Web Service" ולאחר מכן המתן כ-2-5 דקות שהאפליקציה תעלה לאוויר

### צעד 4: גישה מהאייפד

1. אחרי שהשירות ייצר, קבל את כתובת ה-URL (כמו `https://betbox-live.onrender.com`)

2. פתח את הכתובת הזו באייפד בדפדפן Safari

3. הוסף למסך הבית:
   - לחץ על כפתור השיתוף (Share) 
   - גלול מטה ולחץ "Add to Home Screen"
   - קבע שם וסיים

האם אתה רוצה עזרה נוספת באחד מהשלבים?​​​​​​​​​​​​​​​​
